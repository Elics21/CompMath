import math

# Функция для вычисления значения уравнения x^2 - 3
def f(x):
    return x**2 - 3

# Функция для вычисления производной уравнения f(x)
def f_prime(x):
    return 2*x

# Функция, реализующая метод Ньютона
def newton_method(x0, epsilon):
    x = x0  # Начальное приближение корня
    i = 0  # Счетчик итераций
    print(f"x0 = {x0}")  # Вывод начального приближения

    while True:
        x_new = x - f(x) / f_prime(x)  # Вычисление нового приближения по формуле Ньютона
        correction = abs(x_new - x)  # Вычисление абсолютного значения корректировки
        print(f"x{i} = {x:.15f} - {correction:.15f} = {x_new:.15f}")  # Вывод текущего приближения, корректировки и нового приближения

        if correction < epsilon:  # Проверка условия выхода из цикла (корректировка меньше требуемой точности)
            break

        x = x_new  # Обновление значения x новым приближением
        i += 1  # Увеличение счетчика итераций

    print(f"\nКоличество итераций: {i}")  # Вывод количества итераций
    print(f"x: {x_new:.15f}")  # Вывод найденного корня уравнения

# Задание начального приближения корня и требуемой точности
x0 = 2.0
epsilon = 1e-7

# Вызов функции newton_method с заданными параметрами
newton_method(x0, epsilon)